<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration PUBLIC
        "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" >
<generatorConfiguration>
    <!--导入属性配置-->
    <properties resource="jdbc.properties"></properties>

    <context id="context" targetRuntime="MyBatis3" defaultModelType="flat">
        <!--当表名或者字段名为SQL关键字的时候，MBG会自动给表名或字段名添加分隔符-->
        <property name="autoDelimitKeywords" value="true"/>
        <!--由于beginningDelimiter和endingDelimiter的默认值为双引号(")，在Mysql中不能这么写，所以还要将这两个默认值改为反单引号(`)-->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <!--指定模板来生成java文件及xml文件-->
        <!--<property name="javaFormatter" value=""/>-->
        <!--<property name="xmlFormatter" value=""/>-->

        <!-- optional，旨在创建class时，对注释进行控制,设置为true关闭所有的注解 -->
        <commentGenerator>
            <property name="suppressAllComments" value="true"/>
            <property name="suppressDate" value="true"/>
        </commentGenerator>

        <!--数据库连接-->
        <jdbcConnection driverClass="${jdbc.driverClassName}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}"/>

        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径
        -->
        <javaModelGenerator targetPackage="com.example.bootdemo.entity" targetProject="src/main/java">
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="true"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!--Mapper.xml生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
          type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
          type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
          type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
        -->
        <javaClientGenerator targetPackage="com.example.bootdemo.dao" targetProject="src/main/java" type="XMLMAPPER">
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!--对应数据库表 mysql可以加入主键自增 字段命名 忽略某字段等-->
        <table tableName="users" domainObjectName="User"/>
        <!--<table tableName="role" domainObjectName="Role"/>-->
        <!--<table tableName="role_authority" domainObjectName="RoleAuthority"/>-->
        <!--<table tableName="lab_info" domainObjectName="LabInfo"/>-->
        <!--<table tableName="t_project" domainObjectName="Project"/>-->
        <!--<table tableName="project_result" domainObjectName="ProjectResult"/>-->
        <!--<table tableName="project_activity" domainObjectName="ProjectActivity"/>-->
        <!--<table tableName="t_share_config" domainObjectName="ShareConfig" />-->
        <!--<table tableName="t_accident" domainObjectName="Accident"/>-->
        <!--<table tableName="t_staff" domainObjectName="Staff"/>-->
        <!--<table tableName="t_laboratory" domainObjectName="Lab"/>-->
        <!--<table tableName="t_bacterial" domainObjectName="Virus"/>-->
        <!--<table tableName="t_bacterial_register_table" domainObjectName="Register"/>-->
    </context>
</generatorConfiguration>